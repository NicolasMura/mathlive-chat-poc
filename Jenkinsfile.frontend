// Idées sauvegardées :
// https://collabnix.com/5-minutes-to-continuous-integration-pipeline-using-docker-jenkins-github-on-play-with-docker-platform/

pipeline {
    agent none

    environment {
        APPLICATION_NAME = 'mathlive-chat-poc-frontend-public'
        DOCKER_IMAGE_NAME = 'nicolasmura/mlchat-poc-frontend-public'
        DOCKER_IMAGE = ''
        DOCKER_IMAGE_LATEST = ''
    }

    stages {
        stage('SCM Checkout') {
            agent any
            steps {
                step([$class: 'WsCleanup'])
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'mlchat-poc']],
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: 'Nico-Github', url: 'https://github.com/NicolasMura/mathlive-chat-poc.git']]
                ])
            }
        }
        stage('Build & Test') {
            agent {
                docker {
                    // image 'cypress/included:7.3.0' // n'a pas l'air de fonctionner...
                    image 'cypress/base:12.19.0'
                    // Run the container on the node specified at the top-level of the Pipeline, in the same workspace, rather than on a new node entirely:
                    reuseNode true
                }
            }
            steps {
                sh '''#!/bin/bash
                    whoami
                    pwd
                    ls -la
                    node --version
                    yarn --version
                    yarn && BUILD_ID=${BUILD_ID} yarn generate-build-infos
                    npx nx e2e frontend-public-e2e --headless
                    npx nx build frontend-public --prod
                '''
            }
        }
        stage('Build & Push Docker image') {
            agent any
            steps {
                sh '''#!/bin/bash
                    whoami
                    pwd
                    ls -la
                    docker --version
                '''
                withCredentials([
                    file(credentialsId: 'mathlive-chat-poc.nicolasmura.com_privkey.pem', variable: 'privkey'),
                    file(credentialsId: 'mathlive-chat-poc.nicolasmura.com_fullchain.pem', variable: 'fullchain')
                ]) {
                    writeFile file: 'ssl/privkey.pem', text: readFile(privkey)
                    writeFile file: 'ssl/fullchain.pem', text: readFile(fullchain)
                }
                script {
                    DOCKER_IMAGE = docker.build("$DOCKER_IMAGE_NAME:$BUILD_NUMBER", "-f .docker/Dockerfile.frontend-public .")
                    DOCKER_IMAGE_LATEST = docker.build("$DOCKER_IMAGE_NAME", "-f .docker/Dockerfile.frontend-public .")
                    // Assume the Docker Hub registry by passing an empty string as the first parameter
                    // @TODO: sécuriser le login (cf. job logs : warning WARNING! Using --password via the CLI is insecure. Use --password-stdin.)
                    docker.withRegistry('' , 'dockerhub') {
                        DOCKER_IMAGE.push()
                        DOCKER_IMAGE_LATEST.push()
                    }
                }
            }
        }
        stage('Clean') {
            agent any
            steps {
                sh "docker image ls"
                sh "docker rmi $DOCKER_IMAGE_NAME:$BUILD_NUMBER $DOCKER_IMAGE_NAME:latest"
                sh "docker image ls"
            }
        }
    }
}
